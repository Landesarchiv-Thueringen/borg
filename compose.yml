services:
  gui:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/gui:${IMAGE_VERSION}
    build:
      context: ./gui
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
        - CONFIGURATION=${GUI_CONFIGURATION}
    depends_on:
      server:
        condition: service_started
        restart: true
    environment:
      - SERVER_API_URL=http://server/api/
    ports:
      - ${PORT}:80

  server:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/server:${IMAGE_VERSION}
    build:
      context: ./server
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
      - "./config:/borg/config"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  droid:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/droid:${IMAGE_VERSION}
    build:
      context: ./tools/droid
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  siegfried:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/siegfried:${IMAGE_VERSION}
    build:
      context: ./tools/siegfried
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  tika:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/tika:${IMAGE_VERSION}
    build:
      context: ./tools/tika
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  magika:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/magika:${IMAGE_VERSION}
    build:
      context: ./tools/magika
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  mediainfo:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/mediainfo:${IMAGE_VERSION}
    build:
      context: ./tools/mediainfo
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  jhove:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/jhove:${IMAGE_VERSION}
    build:
      context: ./tools/jhove
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  verapdf:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/verapdf:${IMAGE_VERSION}
    build:
      context: ./tools/verapdf
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  odf-validator:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/odf-validator:${IMAGE_VERSION}
    build:
      context: ./tools/odf-validator
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

  ooxml-validator:
    restart: unless-stopped
    image: ${IMAGE_PREFIX}/ooxml-validator:${IMAGE_VERSION}
    build:
      context: ./tools/ooxml-validator
      args:
        - HTTP_PROXY=${HTTP_PROXY}
        - HTTPS_PROXY=${HTTPS_PROXY}
    volumes:
      - "file-store:/borg/file-store"
    environment:
      - PORT=80
      - GIN_MODE=${GIN_MODE}

volumes:
  file-store:
